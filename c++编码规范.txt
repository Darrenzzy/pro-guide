c++编码规范

1.命名规范
	1. 总体规则:不要随意缩写,如果说ChangeLocalValue写作ChgLocVal还有情可 原的话,把 ModifyPlayerName 写作 MdfPlyNm就太过分了,除函数名可适当为动 词外,其他命名尽量使用清晰易懂的名词;
	2. 宏、枚举等使用全部大写+下划线;
	3. 变量(含类、结构体成员变量)、文件、命名空间、存取函数等使用全部小+写下划线,类成员变量以下划线结尾,全局变量以 g_开头;
	4. 普通函数、类型(含类与结构体、枚举类型)、常量等使用大小写混合,不含下划线; 
	5. 参考现有或相近命名约定。
	6.文件名要全部小写,可以包含下划线(_)或短线(-),按项目约定来。
	7.类型命名每个单词以大写字母开头,不包含下划线
	8.常量命名(Constant Names) 在名称前加 k:kDaysInAWeek。
	9.命名空间的名称是全小写的,其命名基于项目名称和目录结构:google_awesome_project。
	10.枚举值应全部大写,单词间以下划线相连:MY_EXCITING_ENUM_VALUE。

2.格式规范
	
	1. 行宽原则上不超过 80 列,把 22 寸的显示屏都占完,怎么也说不过去;
	2. 尽量不使用非ASCII字符,如果使用的话,参考UTF-8格式(尤其是UNIX/Linux 下,Windows 下可以考虑宽字符)，尽量不将字符串常量耦合到代码中,比如独立出资 源文件,这不仅仅是风格问题了;
	3. UNIX/Linux 下无条件使用空格,MSVC 的话使用 Tab 也无可厚非;
	4. 函数参数、逻辑条件、初始化列表:要么所有参数和函数名放在同一行,要么所有参数并排分行;
	5. 除函数定义的左大括号可以置于行首外,包括函数/类/结构体/枚举声明、各种语句的 左大括号置于行尾,所有右大括号独立成行;
	6. ./->操作符前后不留空格,*/&不要前后都留,一个就可,靠左靠右依各人喜好; 7. 预处理指令/命名空间不使用额外缩进,类/结构体/枚举/函数/语句使用缩进; 8. 初始化用=还是()依个人喜好,统一就好;
	9. return 不要加();
	10. 水平/垂直留白不要滥用,怎么易读怎么来。

3.头文件
	1.所有头文件都应该使用#define 防止头文件被多重包含 (multiple inclusion), 命名格式 当是:<PROJECT>_<PATH>_<FILE>_H_
	2.头文件依赖  使用前置声明(forward declarations)尽量减少.h 文件中#include 的数量。
		在头文件如何做到使用类 Foo 而无需访问类的定义?
		1) 将数据成员类型声明为 Foo *或 Foo &;
		2) 参数、返回值类型为Foo的函数只是声明(但不定义实现);
		3) 静态数据成员的类型可以被声明为Foo,因为静态数据成员的定义在类定义之外。
		另一方面,如果你的类是 Foo 的子类,或者含有类型为 Foo 的非静态数据成员,则必须为 之包含头文件。
	3.定义函数时,参数顺序为:输入参数在前,输出参数在后。
	4. 包含文件的名称及次序
		foo.h(优先位置,详情如下) 
		C 系统文件
		C++系统文件
		其他库头文件
		本项目内头文件
		避免使用UNIX 文件路径.(当前目 录)和..(父目录)
4.作用域
	1.在.cc 文件中,允许甚至提倡使用不具名命名空间,以避免运行时的命名冲突  namespase{}
	2.命名空间将除文件包含、 全局标识的声明/定义以及类的前置声明外的整个源文件封装起来, 以同其他命名空间相区分。
	3.局部变量 将函数变量尽可能置于最小作用域内,在声明变量时将其初始化。
	4.class 类型的全局变量是被禁止的,内建类型的全局变量是允许的
	5. .cc 中的不具名命名空间可避免命名冲突、 限定作用域, 避免直接使用using 提示符污 染命名空间;
	6. 嵌套类符合局部使用原则,只是不能在其他头文件中前置声明,尽量不要public;
	7. 尽量不用全局函数和全局变量,考虑作用域和命名空间限制,尽量单独形成编译单元;
	8. 多线程中的全局变量(含静态成员变量)不要使用 class 类型(含 STL 容器),避免 不明确行为导致的 bugs。作用域的使用,除了考虑名称污染、可读性之外,主要是为降低耦合度,提高编译、执行效率。
5.类
	1. 不在构造函数中做太多逻辑相关的初始化;
	2. 编译器提供的默认构造函数不会对变量进行初始化,如果定义了其他构造函数,编译器 不再提供,需要编码者自行提供默认构造函数;
	3. 为避免隐式转换,需将单参数构造函数声明为 explicit;
	4. 为避免拷贝构造函数、赋值操作的滥用和编译器自动生成,可目前声明其为private 且无需实现;
	5. 仅在作为数据集合时使用 struct;
	6. 组合>实现继承>接口继承>私有继承,子类重载的虚函数也要声明virtual关键字,虽然编译器允许不这样做;
	7. 避免使用多重继承,使用时,除一个基类含有实现外,其他基类均为纯接口;
	8. 接口类类名以 Interface 为后缀,除提供带实现的虚析构函数、静态成员函数外,其 他均为纯虚函数, 不定义非静态数据成员, 不提供构造函数, 提供的话,p声ro明t为ected;
	9. 为降低复杂性,尽量不重载操作符,模板、标准类中使用时提供文档说明; 10. 存取函数一般内联在头文件中;
	11. 声明次序:public->protected->private;
	12. 函数体尽量短小、紧凑,功能单一。
