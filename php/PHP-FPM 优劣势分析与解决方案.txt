PHP-FPM 优劣势分析与解决方案
优劣势分析
PHP-FPM 的优势有许多，如实现了 FastCGI 协议来处理 HTTP 请求，有着更高的性能和更小的开销。每当 PHP-FPM 的子进程处理完 HTTP 请求后，相关资源自动销毁，不用担心资源回收的问题。哪怕在运行的过程中报错了，也不影响其他子进程的运行，使得开发者不用过分担心未知的错误而进行面面俱到的防御性编码。在低负载时硬件开销低，只需要 fork 多几个子进程就满足日常访问量。

PHP-FPM 的劣势也很明显。首先是不适合高并发和高负载的场景。因为在高负载的情况，由于 PHP-FPM 多进程模型，会显得子进程的初始化开销过高。加上进程、文件句柄、请求连接等，会使得内存过多地消耗，而 CPU 也得不到充分的利用。又因为子进程的开销过高，导致服务器的内存容易饱满，使得网络连接数过低。由于 PHP-FPM 在完成请求会自动销毁资源，因此也不支持 Websocket 或其他长连接协议。

解决方案
针对 PHP 高初始化开销这个问题，可以使用 C 扩展的框架来重写相关业务，如 Phalcon、Yaf。针对 PHP 高内存开销，设置好短连接、短超时，和使用并行化 RPC 来尽快处理请求。而针对地连接数，只能是加大内存，增加服务器了。不支持 Websocket，只能使用 Nginx 进行反向代理，将 Websocket 等或其他长连接交给服务器其他 Web Server 处理。如 PHP 的 Swoole 或 C/C++/Go/Java 等语言编写的 Web Server。


CGI、FastCGI、PHP-CGI、PHP-FPM 的区别
CGI：一种协议，是外部应用程序与 Web Server 之间的接口标准，是在 CGI 程序和 Web Server 之间传递信息的规程。
FastCGI：一种协议，通过守护进程来管理 CGI 程序，将 CGI 程序常驻于内存中，不必每次处理请求重新初始化 php.ini 和其他数据，提高 CGI 程序的性能。其本身并不处理动态文件，只是负责进程的调度。
PHP-CGI：使用 PHP 实现 CGI 协议的程序，用于解析和处理 PHP 脚本。
PHP-FPM：是一个只用于 PHP 的进程管理器，提供更好的 PHP 进程管理方式，可以有效控制进程，平滑地加载 PHP 配置文件。


参考地址： http://luisedware.github.io/2016/06/10/PHP%20Web%20Application%20%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B%E3%80%81%E6%A6%82%E5%BF%B5%E6%9C%AF%E8%AF%AD%E3%80%81%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E5%92%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E8%B7%B5/