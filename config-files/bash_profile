source ~/.profile_work
##################### source something ###########################


##################### start  alias ###########################

#docker
alias docll='cat /Users/darren/.oh-my-zsh/plugins/docker-compose/docker-compose.plugin.zsh'
alias dockerlog='docker logs -tf --tail 10 '
alias dockerps='docker ps -a  --format "table {{.ID}}\t{{.Names}}\t{{.Ports}}\t{{.Status}}"'
alias docimg='docker images'
alias doc='docker '

#golang 相关
alias go-deploy='/Users/darren/go/src/deploy'
alias gosrc='/Users/darren/go/src'
alias gotest='/Users/darren/go/src/person-go'
alias pbgen="protoc --go_out=plugins=irpc:. *.proto"
alias pbg="protoc --go_out=plugins=grpc:. *.proto"
#alias pbgenswagger="pbgen && swagger generate spec -o ./$(basename $(pwd)).json"
alias cdswag="/Users/darren/go/src/testgo/modgo/swag"
alias gvvv='go vet $(go list ./... | grep -v /vendor/)'
alias gmm='go mod tidy'

#ssh快速链接
alias sshnewu='ssh root@119.28.10.43'

#快捷打开路径
alias ppp='cd ~/projects'
alias guide='cd ~/projects/guide'
alias openvs='open -a Visual\ Studio\ Code '
alias opensb='open -a Sublime\ Text '

#自定义快捷命令
alias duhd='du -hx -d 1'
alias ppsql='psql -U postgres'
alias sss_bash_profile='source ~/.bash_profile'
alias pps='ps -ef |grep '
alias tf='tail -f '
alias tn='tail -n 10'
alias kk='/bin/ls -all'
alias lalt='/bin/ls -alt'
alias cc='clear'
alias 。。=..
alias vimbash_pro='vim ~/.bash_profile'
alias 查的='cd '
alias wgetfile='wget --no-check-certificate --content-disposition '
alias curlfile='curl  -LJO '
#alias ip='ipconfig getifaddr en6'
alias rrf='/bin/rm -rf '
# 显示文件树
alias fffd='find . -print | sed -e "s;[^/]*/;|__;g;s;__|;  |;g"'
alias bbb='bpytop'
alias uuuu='ulimit -n 4096 '
alias cat='bat -p -p '
. /opt/homebrew/etc/profile.d/z.sh
alias power='system_profiler SPPowerDataType'



#快速查看 git 快捷命令
alias lessgit='less /Users/darren/.oh-my-zsh/plugins/git/git.plugin.zsh'
alias lessgo='less /Users/darren/.oh-my-zsh/plugins/golang/golang.plugin.zsh'
alias gcld='gcl --depth 1'
# gstaa='git stash apply'
alias gtime='for branch in `git branch | grep -v HEAD`;do echo -e `git show --format="%ci %cr" $branch | head -n 1` \\t $branch | sed "s/origin\///g" ; done | sort -r |head -n 20'

alias gcoo="git checkout $(git_current_branch) -- "
alias gitresetsoft="git reset --soft "
alias gitresethard="git reset --hard "
#设置最大连接数
ulimit -n 5242

###################### end  alias ###########################



##################### start  export ###########################

#golang
export GOPATH=/Users/darren/go
export GOBIN=/Users/darren/go/bin
#导入 GO111MODULE=on  不使用GOPATH运行否则请手动下载下一步的包 用于go get 命令
#export GO111MODULE=on
export CGO_ENABLED=1
export CGO_CFLAGS='-O0 -g'
export PATH=$PATH:/Users/darren/go/bin
export GOPROXY=https://goproxy.cn,direct
export GOFLAGS=-mod=mod
#export CPATH="/opt/homebrew/Cellar/hdf5/1.14.3_1/include"
#export LIBRARY_PATH="/opt/homebrew/Cellar/hdf5/1.14.3_1/lib"

# 防止报mac cpu: error: 'TARGET_OS_MAC' is not defined 加这个环境变量
#export CGO_CFLAGS=-Wno-undef-prefix

#python
alias py=python
alias py3=python

#rust
export RUSTUP_DIST_SERVER="https://rsproxy.cn"
export RUSTUP_UPDATE_ROOT="https://rsproxy.cn/rustup"

#mysql
#  export LDFLAGS="-L/opt/homebrew/opt/mysql-client/lib"
# export CPPFLAGS="-I/opt/homebrew/opt/mysql-client/include"
#  export PATH="/opt/homebrew/opt/mysql-client/bin:$PATH"
#  export PKG_CONFIG_PATH="/opt/homebrew/opt/mysql-client/lib/pkgconfig"

#CPP
#export VALID_ARCHS='armv6 armv7 armv7s arm64'
#export ARCHS='armv7 armv7s'



#使用到的环境变量
export PATH=$PATH:/Users/darren/go/bin/act_Darwin_arm64
export PATH=/opt/homebrew/bin:$PATH
export DISPLAY=:0

export PKG_CONFIG_PATH="/opt/homebrew/opt/curl/lib/pkgconfig"
export PATH="/opt/homebrew/opt/libressl/bin:$PATH"

export PKG_CONFIG_PATH="/opt/homebrew/opt/libressl/lib/pkgconfig"
export LDFLAGS="-L/opt/homebrew/opt/libressl/lib"
export CPPFLAGS="-I/opt/homebrew/opt/libressl/include"
###################### end  export ###########################



###################### start  function ###########################


function redis-start(){
	redis-server ~/projects/guide/config-files/redis-6379.conf
}

function gcld1(){
        if [[ ! -z $1 ]]; then
                gcl $1 --depth 1
        else
		echo "没有填写参数"
         fi
}

function opengit(){
	if [[ ! -z $1 ]]; then
		if [[ $1 != *http* ]]; then
			url='http://'
		fi
		open -n $url$1
	else

	open -n  $(git remote -v |head -n 1 |awk '{print $2}'  |sed 's/git@/http:\/\//g' |sed 's/.git$//g'|sed 's/com:/com\//g')
         fi
}

function sshinit(){
#遍历添加用户登录时添加本地秘钥
	for file in `ls ~/.ssh/id_rs* |grep -v pub`
		do
			[ -r "$file" ] && ssh-add  "$file"
				done
					unset file
}


#自动导入 vimrc 配置
function open_vimrc(){
	echo "先导入vim配置文件";
	cp /Users/darren/projects/guide/config-files/vimrc.conf ~/.vimrc;
	source ~/.vimrc;

}

# push上去第一次
function gps(){
	branch=$(git symbolic-ref --short -q HEAD)
	org=$(git remote)
	echo "git push --set-upstream $org $branch"
	gp --set-upstream $org $branch
}

###################### end  function ###########################

###################### start other ###########################

#终端代理配置 开启后每次打开终端都生效
function proxy {
	if [[ $1 = "on" ]]; then
		export http_proxy=http://127.0.0.1:8001
			export https_proxy=http://127.0.0.1:8001
			curl ifconfig.co/json
#      curl ip.gs
			echo -e "已开启代理" http_proxy=$http_proxy https_proxy=$https_proxy

	elif [[ $1 = "btw" ]]; then
			 export http_proxy=http://127.0.0.1:4780
                        export https_proxy=http://127.0.0.1:4780
                        curl ifconfig.co/json
                        echo -e "已开启代理" http_proxy=$http_proxy https_proxy=$https_proxy

	elif [[ $1 = "off" ]]; then
			unset http_proxy
			unset https_proxy
			git config --global --unset http.proxy
                        git config --global --unset https.proxy
			echo -e "已关闭代理"
	elif [[ $1 = "git" ]]; then
			git config --global http.proxy 'http://127.0.0.1:8001'
			git config --global https.proxy 'http://127.0.0.1:8001'
			echo -e "已经开启 git"
	elif [[ $1 = "gitsock" ]]; then
                        git config --global http.proxy 'socks://localhost:1080'
                        git config --global https.proxy 'socks://localhost:1080'
                        echo -e "已经开启 gitsock!"
	else
		echo -n "Usage: proxy [on|off|git] "
	fi
}

function kills(){
	~/kills.sh $1
}


# 定期同步配置
function sync_bashprofile_to_git(){
    # 提示用户输入
    echo "同步从git到当前~/ 是否继续？ [Y/n]"
    read -r op

    # 根据用户的输入决定是否执行后续逻辑
    if [ "$op" = "y" ] || [ "$op" = "Y" ]; then
        # 用户输入了 Y 或 y，继续执行脚本
	  cp ~/.bash_profile ~/.bash_profile.bak$(date "+%H:%M:%S")
	  cp /Users/darren/projects/guide/config-files/bash_profile  ~/.bash_profile
	  echo "成功同步从git到当前~/"
    elif [ "$op" = "n" ] || [ "$op" = "N" ]; then
      echo "成功同步从当前~/ 到git "
	  cp ~/.bash_profile /Users/darren/projects/guide/config-files/bash_profile
    else
        echo "无效输入. Please enter 'y' (yes) or 'n' (no)."
        # 递归调用自身，再次询问用户
        sync_bashprofile_to_git
    fi
}

# 快速打开文件用goland 指定行数
gg(){
python3 /Users/darren/go/bin/goland-cmd.py $@
}

#/Users/darren/.oh-my-zsh/themes/robbyrussell.zsh-theme 这里是直接篡改主题显示的配置 以下任意终端都生效：
#PROMPT='$(date "+%H:%M:%S") ${ret_status}%{$fg[cyan]%}%d$(git_prompt_info) '$'\n'
PROMPT='$(date "+%H:%M:%S") ${ret_status}%{$fg[cyan]%}%d$(git_prompt_info)'$'\n'
#RPROMPT='$(git_prompt_info)$(date "+%H:%M:%S")'
ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_bold[blue]%}(%{$fg[red]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[blue]%})%{$fg[yellow]%}✗"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[blue]%})"

###################### end  other ##########################
export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles
export HOMEBREW_API_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api"

#export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles
# 防止每次自动执行清除过期包指令，可以在定期有时间的时候，主动来执行清除
export HOMEBREW_NO_AUTO_UPDATE=1
export HOMEBREW_NO_INSTALL_CLEANUP=1

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<


alias dkr='remove_docker_container'
function remove_docker_container()
{
    container_name=$1
    docker stop "${container_name}"
    docker rm "${container_name}"
}
